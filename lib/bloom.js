/* * Bloom v1.1.0 * Javascript UI Library * Christopher W. Johnson * Copyright 2012 Silent Orb */var Bloom = (function () {  'use strict';  var Bloom = {};    MetaHub.import_all();   MetaHub.current_module = Bloom;    function Block(name) {    this.name = name;    Block.library[name] = this;  }  Bloom.Block = Block;    Block.library = {}  Block.default_extension = '.html';  Block.source_path = "";    Block.load = function (name) {    var block = new Block(name);    jQuery.get(Block.source_path + "/" + name + Block.default_extension, function(data) {      block.html = data;    });  }    Block.generate = function(name, data) {    return Block.library[name].generate(data);  }    Block.generate_query = function(name, data) {    return Block.library[name].generate_query(data);  }    Block.prototype = {    constructor: Block,    name: '',    html: '',         on_add: function() {},    generate: function(data) {      return Element.create(this.generate_query(data), data);    },    generate_query: function(control, owner) {      var output = this.html;            output = output.replace(/@{([\W\w]*?)}(?=\s*(?:<|"))/gm, function(all, code) {        var result = eval(code);        if (typeof result === "undefined" || result == null)          return '';                if (result.hasOwnProperty('element')) {          if (owner)            owner.children.push(result);                    return result.element.html();        }                return result;      });            var result = $(output);      if (this.on_add)        this.on_add(result, control.data);      return result;    }  }    var Element = Meta_Object.sub_class('Element', {    children: [],    initialize: function(source, data) {            // If class defines a certain block to use,       // class initialization doesn't pass any jQuery object or html text            if (this.block) {        if (data == null)          data = source;        this.render(this.block, data);      }          else       {        if (source == null)          return;                if (source.hasOwnProperty('jquery'))          this.element = source;          else          this.element = jQuery(source);                this.extend(data);      }      },    render: function(block_name, data) {      //      this.extend(data);      this.data = data;      this.element = Block.generate_query(block_name, this);    },    bind: function(event, method) {      var self = this;            this.element.bind(event, function() {        method.apply(self, arguments);      })    },    bind_child: function(query, event, method) {      var self = this;      this.element.find(query).bind(event, function() {        method.apply(self, arguments);      })    },    get_data: function() {      var args = Array.prototype.slice.call(arguments);      var method = args.pop();      jQuery.get(args, function() {        var args = Array.prototype.slice.call(arguments);        args.push('json');        method.apply(this, args);      });    },    post_data: function() {      var args = Array.prototype.slice.call(arguments);      var method = args.pop();      jQuery.get(args, function() {        var args = Array.prototype.slice.call(arguments);        args.push('json');        method.apply(this, args);      });    },    source_to_element: function(){                  for (var name in this.data) {        var element = result.find('#' + name + ', .' + name).first();        if (element.length == 1) {          var property = this.data[name];          if (typeof this.data[name] != 'function') {            property = MetaHub.metanize(property);            this.data[name] = property;            element = MetaHub.metanize(element);            property.connect(element, 'element');            property.link(element);            property.invoke('change', property.value);            this.connect(element, 'child', 'parent');          }                              }      }          }  });    var Node = Element.sub_class('Node', {    initialize: function() {      this.nid = this.element.attr('nid');      this.type = this.element.attr('type');        }  });    var List = Element.sub_class('List', {    add_button: function(html, click) {      var row = $('<li>' + html + '</li>');      this.element.append(row);       if (click)        row.find('a').click(click);    },    empty: function() {      this.children.length = 0;      this.element.empty();    },    append:function(item) {      var line = jQuery('<li></li>');      line.append(item.element);      this.element.append(line);      this.children.push(item);      item.parent = this;      return item;    }  });    var Dialog = Element.sub_class('Dialog', {    active: false,    width: 340,    height: 500,    title: 'Dialog',    initialize: function(title, nid) {      var self = this;      if (title)        this.title = title;            this.nid = nid;      this.element.find('input#submit').click(function(e){        e.preventDefault();        self.invoke('submit');      });            this.listen(this, 'submit', function(){        for(var property in this.data) {          if (property.is_meta_object) {            var element = property          }        }        self.close();      });    },    show: function() {      var self = this;      if (self.element.parent().length == 0)        jQuery('body').append(self.element);            self.dialog = self.element.dialog({        title: self.title,        width: self.width,        height: self.height,        modal: true,        close: function() {          self.element.remove();                        $(window).unbind();          self.invoke('close');        }           });    },    close: function(){      this.dialog.dialog('close');    },    update: function() {          var block = this;      jQuery.get(this.query(), function(data) {        block.invoke('updating', data);                if (!block.active) {          block.show();                    $(window).keydown(function(event) {            if (event.keyCode == 13) {              event.preventDefault();              return false;            }          });          block.active = true;          block.invoke('updated', data);        }              }, 'json');    },    query: function() {}    });    var Paged_Dialog = Dialog.sub_class('Paged_Dialog', {    page: 0,    rows:10,    page_size: 5,    initialize: function() {      var block = this;            this.element.find('.previous').click(function() {        if (block.page > 0) {          --block.page;          block.update();        }              });            this.element.find('.next').click(function() {        if (block.page < Math.round(block.rows / block.page_size)) {          ++block.page;          block.update();        }              });          this.element.find('.filter').change(function() {              block.update();      });            this.element.find('.filter').keyup(function(e) {        if (e.keyCode == 13) {          e.preventDefault();          block.update();             }      });                this.listen(this, 'updating', function(data) {        this.rows = data.total;      });    }  });    var Upload_Dialog = Dialog.sub_class('Upload_Dialog', {    block: 'upload-dialog',    height:200,    initialize: function() {      var dialog = this;      this.element.find('#upload_button').click(function(e) {        e.preventDefault();        var block = $(this).parent();        block.find('#file_control').upload('/retrax_upload_file', {          nid: page_nid,          title: block.find('#document_title').val()        }, function(response) {          //     dialog.close();          window.location.reload();          System.send_messages(response);        }, 'html');      });    }  });    function Form(block_id) {    return Block.library[block_id].html;  //  return Block.generate(block_id);  }  Bloom.Form = Form;    Form.radio = function(name, options, value) {    var text = '<select name="' + name + '">';    for(key in options) {      text += '<option ';      if (key == value)        text += 'selected="selected" ';      text += 'value="' + key + '">' + options[key] + '</option>';    }    text += '</select>';    return text;  }    var System = {     send_message: function() {},    send_messages: function(response) {      if (response.message) {        System.send_message(response.message);      }      if (response.messages) {        var message = '';        for(var index in response.messages) {          message += response.messages[index][0] + '<br/>';        }                System.send_message(message);      }    },    post: function(url, data, method) {      if (!method) {        method = data;        data = null;      }            jQuery.post(url, data, function(response) {        if (!response.result) {          System.send_message('There was a problem communicating with the server.');          return;        }        if (response.result.toLowerCase() == 'success') {          if (method)            method(response);        }                      System.send_messages(response);      });        }  }  Bloom.System = System;    // I want to keep Bloom open for working in systems outside of the browser, just in case.  // As a rule of thumb, use Global() to refer to global variables, and  // use window to refer to window specific members.    Bloom.import_all = function() {    MetaHub.extend(Global(), Bloom);    delete Global().extend;  }    return Bloom;})();